swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  contact:
    email: "danielmcoelho@ua.pt"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:5000"
basePath: "/"
tags:
- name: "account"
  description: "Generation and management of Accounts"
  externalDocs:
    description: "Documentation about API Accounts"
    url: "https://danmartyns.github.io/PaymentService/account/"
- name: "payment"
  description: "Operations with an account to make payments"
  externalDocs:
    description: "Documentation about API Payments"
    url: "https://danmartyns.github.io/PaymentService/payment/"
schemes:
- "https"
- "http"
paths:
  /account:
    post:
      tags:
      - "account"
      summary: "Create an account with a uuid user"
      description: ""
      operationId: "create_account"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "formData"
        description: "ID of the user who will be associated with the created account"
        required: true
        type: "string"
        format: "uuid"
      - name: "currency"
        in: "formData"
        description: "The type of currency your account will be"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Account"
        400:
          description: 'Error code and reason to dispatch the error'
          schema:
            $ref: "#/definitions/ApiResponse"
  /account/{id}/amount:
    post:
      tags:
      - "account"
      summary: "Add an amount of money to an account"
      operationId: "add_amount"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name : "id"
        in : "path"
        required: true
        type: "string"
        format: "uuid"
        description: "The identifier number of the account"
      - name: "amount"
        in : "formData"
        required: true
        type: "number"
        format: "float"
        description: "The amount added to account"          
      responses:
        200:
          description: "successful operation"
          schema:
            $ref : "#/definitions/ApiResponse"
        400:
          description: "something wrong with the arguments"
          schema:
            $ref : "#/definitions/ApiResponse"
        405:
          description: "method not allowed"
          schema:
            $ref : "#/definitions/ApiResponse"
  /account/{id}/activate:
    post:
      tags:
      - "account"
      summary: ""
      operationId: "activate_account"
      produces:
      - "application/json"
      parameters:
      - name : "id"
        in : "path"
        required: true
        type: "string"
        format: "uuid"
        description: "The identifier number of the account"
      responses:
          200:
            description: "successful operation"
            schema:
              $ref : "#/definitions/ApiResponse"
          304:
            description: "not modified"
            schema:
              $ref : "#/definitions/ApiResponse"

  /account/{id}/desactivate:
    post:
      tags:
      - "account"
      summary: ""
      operationId: "desactivate_account"
      produces:
      - "application/json"
      parameters:
      - name : "id"
        in : "path"
        required: true
        type: "string"
        format: "uuid"
        description: "The identifier number of the account"
      responses:
          200:
            description: "successful operation"
            schema:
              $ref : "#/definitions/ApiResponse"
          304:
            description: "not modified"
            schema:
              $ref : "#/definitions/ApiResponse"      
  /account/{id}:
    get:
      tags:
      - "account"
      summary: "Account Information"
      operationId: "account_info"
      produces:
      - "application/json"
      parameters:
      - name : "id"
        in : "path"
        required: true
        type: "string"
        format: "uuid"
        description: "The identifier number of the account"
      responses:
        200:
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/Account"
        400:
          description: "Invalid ID supplied"
          schema:
            items:
              $ref: "#/definitions/ApiResponse"          
  /account/{id}/payment:
    post:
      tags:
      - "payment"
      summary: "Create a payment"
      operationId: "create_payment"
      produces:
      - "application/json"
      parameters:
      - name : "id"
        in : "path"
        required: true
        type: "string"
        format: "uuid"
        description: "The identifier number of the account"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Payment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Account:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The account identifier number"
      user_id:
        type: "string"
        format: "uuid"
        description: "An user id identifier"        
      balance:
        type: "number"
        format: "float"
        description: "The actual amount in account"
      currency:
        type: "string"
        example: "EUR"
        description: "International standard that defines three-letter codes as currencies established by the International Organization. (ISO 4217)"
      state:
        type: "boolean"
        description: "The account state : ative or inactive"
      created_at:
        type: "string"
        format: "date-time"
        description: "The date when was created the account"
      updated_at:
        type: "string"
        format: "date-time"
        description: "The date when was updated the account"
    xml:
      name: "Account"
  Payment:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "A payment identifier number"
      request_id:
        type: "string"
        format: "uuid"
        description: "A product identifier number"
      buyer_id:
        type: "string"
        format: "uuid"
        description: "The buyer account identifier"
      seller_id:
        type: "string"
        format: "uuid"
        description: "The seller account identifier"
      created_at:
        type: "string"
        format: "date-time"
        description: "When the payment process was created"
      completed_at:
        type: "string"
        format: "date-time"
        description: "When the payment process was updated"
      state:
        type: "string"
        description: "Payment Status"
        enum:
        - "pending"
        - "completed"
        - "cancelled"    
      amount:
        type: "number"
        format: "float"
        description: "The total amount to pay for the product"
      currency:
        type: "string"
        description: "international standard that defines three-letter codes as currencies established by the International Organization. (ISO 4217)"    
      reference:
        type: string
        description: "A brief description about the product"
    xml:
      name: "Payment"
  Transaction:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "A transaction identifier number"
      emission_date:
        type: "string"
        format: "date-time"
        description: "The date when was created the transaction"
      update_date:
        type: "string"
        format: "date-time"
        description: "The date when the transaction was updated"        
      state:
        type: "string"
        description: "Transaction Status"
        enum:
        - "created"
        - "accepted"
        - "completed"
        - "failed"
        - "cancelled"
      amount:
        type: "number"
        format: "float"
        description: "The amount for this transaction"      
      payment_id:
        type: "string"
        format: "uuid"
        description: "A payment identifier number"    
      reference:
        type: string
        description: "A brief description about the transaction"      
    xml:
      name: "Transaction"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      response:
        type: "string"
        example : "reason of success or failure"