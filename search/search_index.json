{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Setup Purpose and Scope Project Structure mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. How to initiate? Conventional Docker mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Home"},{"location":"#setup","text":"","title":"Setup"},{"location":"#purpose-and-scope","text":"","title":"Purpose and Scope"},{"location":"#project-structure","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project Structure"},{"location":"#how-to-initiate","text":"","title":"How to initiate?"},{"location":"#conventional","text":"","title":"Conventional"},{"location":"#docker","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Docker"},{"location":"about/","text":"About My name is Daniel Martins. I am in the last year of Integrated Master of Computers and Telematics.","title":"About"},{"location":"about/#about","text":"My name is Daniel Martins. I am in the last year of Integrated Master of Computers and Telematics.","title":"About"},{"location":"apiOperations/","text":"Page last revised on: 2019-10-14 Account Create Account This endpoint creates one account. Note At the moment of creating an account, an outsourcing already offers a unique identifying ID that identifies the user. You only need to match this ID to an account. Warning If the external source is a social network, for example, a user can sign in with Facebook or Instagram and this generates 2 different users. Request POST /account Content-Type : application/json Field Description Format user_id the user ID UUID currency the account currency 3-letter ISO currency code Response Content-Type : application/json Field Description Format id the account ID UUID user_id the user ID UUID currency the account currency 3-letter ISO currency code balance the available balance Decimal state the account state, one of active , inactive Boolean created_at the instant when the account was created ISO date/time updated_at the instant when the account was last updated ISO date/time Add Amount This endpoint permits add an amount to an account Request POST /account/<id>/amount Content-Type : application/json Field Description Format amount amount to add to account Decimal Response Content-Type : application/json [General Response] Activate Account This endpoints activate an account Request POST /account/<id>/activate Response Content-Type : application/json [General Response] Desactivate Account This endpoints desactivate an account Request POST /account/<id>/desactivate Response Content-Type : application/json [General Response] Account Information This endpoint gives information about an account Resquest GET /account/<id> Response Content-Type : application/json Field Description Format id the account ID UUID user_id the user ID UUID currency the account currency 3-letter ISO currency code balance the available balance Decimal state the account state, one of active , inactive Boolean created_at the instant when the account was created ISO date/time updated_at the instant when the account was last updated ISO date/time Payment All incoming and outgoing payments are represented as transactions and are processed in two stages from the user's perspective: a new transaction is created. the authorization transaction is accepted/declined . A new transaction has pending state, and a processed transaction's state can be one of completed, failed, reverted or declined. Create Payment This endpoint creates a new payment. Request POST account/id/payment Content-Type : application/json Warning To avoid duplicate payment submission because of an error in your code, request_id must be unique for each submitted payment. The request_id must be previously persisted on your side. Field Description Format request_id the client provided ID of the transaction (40 characters max) Text seller_id the ID of the receiving account UUID currency the transaction currency 3-letter ISO currency code reference an optional textual reference shown on the transaction Text Response Content-Type : application/json Field Description Format id the ID of the created payment UUID Get Payments This endpoint list all payments made by an account. Request GET /account/<id>/payments Response Content-Type : application/json Field Description Format id The payment id Text request_id the client provided ID of the transaction (40 characters max) Text seller_id the ID of the receiving account UUID created_at The date when the payment was created ISO date/time currency the transaction currency 3-letter ISO currency code amount The value of the payment Decimal state The state of the payment 'pending, completed or cancelled' Text reference an optional textual reference shown on the transaction Text -------- Create Transaction This endpoint creates a transaction associated with a payment Request POST /payment/<id>/transactions Content-Type : application/json Field Description Format amount amount to add to account Decimal reference an optional textual reference shown on the transaction Text Response Content-Type : application/json Field Description Format id the ID of the created transaction UUID Cancel Transaction This endpoint cancel a transaction associated with a payment ##### Request POST /payment/<payment_id>/transactions/<transaction_id>/cancel Execute the payment This endpoint Request POST /payment/<id>/execute Response Content-Type : application/json [General Response] Authorization payment This endpoint creates a payment confirmation. Request POST /payment/<id>/authorize Response Content-Type : application/json [General Response] Get transactions This endpoint give all the transactions information Request GET /payment/<id>/transactions Response Content-Type : application/json Field Description Format id the ID of the created transaction UUID amount The amount of the transaction Decimal state the transaction state: completed , declined or failed Text id_payment The id of the payment which the transaction is associated UUID emission_date the instant when the transaction was created ISO date/time update_date the instant when the transaction was completed ISO date/time Get Transaction This endpoint gives information about a specific transaction Request GET /payment/<payment_id>/transactions/<transaction_id> Response Content-Type : application/json Field Description Format id the ID of the created transaction UUID amount The amount of the transaction Decimal state the transaction state: completed , declined or failed Text id_payment The id of the payment which the transaction is associated UUID emission_date the instant when the transaction was created ISO date/time update_date the instant when the transaction was completed ISO date/time Errors The API uses the following error codes: Code Meaning 400 Bad Request -- Your request is invalid. 401 Unauthorized -- Your API key is wrong. 403 Forbidden -- Access to the requested resource or action is forbidden. 404 Not Found -- The requested resource could not be found. 405 Method Not Allowed -- You tried to access an endpoint with an invalid method. 406 Not Acceptable -- You requested a format that isn't JSON. 429 Too Many Requests -- You're sending too many requests. 500 Internal Server Error -- We had a problem with our server. Try again later. 503 Service Unavailable -- We're temporarily offline for maintenance. Please try again later. General Response All response messages has the fields 'code' and 'response'. The code is the type HTTP Status, and the response always return a 'status' and a body message when necessary.","title":"API Operations"},{"location":"apiOperations/#account","text":"","title":"Account"},{"location":"apiOperations/#create-account","text":"This endpoint creates one account. Note At the moment of creating an account, an outsourcing already offers a unique identifying ID that identifies the user. You only need to match this ID to an account. Warning If the external source is a social network, for example, a user can sign in with Facebook or Instagram and this generates 2 different users.","title":"Create Account"},{"location":"apiOperations/#request","text":"POST /account Content-Type : application/json Field Description Format user_id the user ID UUID currency the account currency 3-letter ISO currency code","title":"Request"},{"location":"apiOperations/#response","text":"Content-Type : application/json Field Description Format id the account ID UUID user_id the user ID UUID currency the account currency 3-letter ISO currency code balance the available balance Decimal state the account state, one of active , inactive Boolean created_at the instant when the account was created ISO date/time updated_at the instant when the account was last updated ISO date/time","title":"Response"},{"location":"apiOperations/#add-amount","text":"This endpoint permits add an amount to an account","title":"Add Amount"},{"location":"apiOperations/#request_1","text":"POST /account/<id>/amount Content-Type : application/json Field Description Format amount amount to add to account Decimal","title":"Request"},{"location":"apiOperations/#response_1","text":"Content-Type : application/json [General Response]","title":"Response"},{"location":"apiOperations/#activate-account","text":"This endpoints activate an account","title":"Activate Account"},{"location":"apiOperations/#request_2","text":"POST /account/<id>/activate","title":"Request"},{"location":"apiOperations/#response_2","text":"Content-Type : application/json [General Response]","title":"Response"},{"location":"apiOperations/#desactivate-account","text":"This endpoints desactivate an account","title":"Desactivate Account"},{"location":"apiOperations/#request_3","text":"POST /account/<id>/desactivate","title":"Request"},{"location":"apiOperations/#response_3","text":"Content-Type : application/json [General Response]","title":"Response"},{"location":"apiOperations/#account-information","text":"This endpoint gives information about an account","title":"Account Information"},{"location":"apiOperations/#resquest","text":"GET /account/<id>","title":"Resquest"},{"location":"apiOperations/#response_4","text":"Content-Type : application/json Field Description Format id the account ID UUID user_id the user ID UUID currency the account currency 3-letter ISO currency code balance the available balance Decimal state the account state, one of active , inactive Boolean created_at the instant when the account was created ISO date/time updated_at the instant when the account was last updated ISO date/time","title":"Response"},{"location":"apiOperations/#payment","text":"All incoming and outgoing payments are represented as transactions and are processed in two stages from the user's perspective: a new transaction is created. the authorization transaction is accepted/declined . A new transaction has pending state, and a processed transaction's state can be one of completed, failed, reverted or declined.","title":"Payment"},{"location":"apiOperations/#create-payment","text":"This endpoint creates a new payment.","title":"Create Payment"},{"location":"apiOperations/#request_4","text":"POST account/id/payment Content-Type : application/json Warning To avoid duplicate payment submission because of an error in your code, request_id must be unique for each submitted payment. The request_id must be previously persisted on your side. Field Description Format request_id the client provided ID of the transaction (40 characters max) Text seller_id the ID of the receiving account UUID currency the transaction currency 3-letter ISO currency code reference an optional textual reference shown on the transaction Text","title":"Request"},{"location":"apiOperations/#response_5","text":"Content-Type : application/json Field Description Format id the ID of the created payment UUID","title":"Response"},{"location":"apiOperations/#get-payments","text":"This endpoint list all payments made by an account.","title":"Get Payments"},{"location":"apiOperations/#request_5","text":"GET /account/<id>/payments","title":"Request"},{"location":"apiOperations/#response_6","text":"Content-Type : application/json Field Description Format id The payment id Text request_id the client provided ID of the transaction (40 characters max) Text seller_id the ID of the receiving account UUID created_at The date when the payment was created ISO date/time currency the transaction currency 3-letter ISO currency code amount The value of the payment Decimal state The state of the payment 'pending, completed or cancelled' Text reference an optional textual reference shown on the transaction Text --------","title":"Response"},{"location":"apiOperations/#create-transaction","text":"This endpoint creates a transaction associated with a payment","title":"Create Transaction"},{"location":"apiOperations/#request_6","text":"POST /payment/<id>/transactions Content-Type : application/json Field Description Format amount amount to add to account Decimal reference an optional textual reference shown on the transaction Text","title":"Request"},{"location":"apiOperations/#response_7","text":"Content-Type : application/json Field Description Format id the ID of the created transaction UUID","title":"Response"},{"location":"apiOperations/#cancel-transaction","text":"This endpoint cancel a transaction associated with a payment ##### Request POST /payment/<payment_id>/transactions/<transaction_id>/cancel","title":"Cancel Transaction"},{"location":"apiOperations/#execute-the-payment","text":"This endpoint","title":"Execute the payment"},{"location":"apiOperations/#request_7","text":"POST /payment/<id>/execute","title":"Request"},{"location":"apiOperations/#response_8","text":"Content-Type : application/json [General Response]","title":"Response"},{"location":"apiOperations/#authorization-payment","text":"This endpoint creates a payment confirmation.","title":"Authorization payment"},{"location":"apiOperations/#request_8","text":"POST /payment/<id>/authorize","title":"Request"},{"location":"apiOperations/#response_9","text":"Content-Type : application/json [General Response]","title":"Response"},{"location":"apiOperations/#get-transactions","text":"This endpoint give all the transactions information","title":"Get transactions"},{"location":"apiOperations/#request_9","text":"GET /payment/<id>/transactions","title":"Request"},{"location":"apiOperations/#response_10","text":"Content-Type : application/json Field Description Format id the ID of the created transaction UUID amount The amount of the transaction Decimal state the transaction state: completed , declined or failed Text id_payment The id of the payment which the transaction is associated UUID emission_date the instant when the transaction was created ISO date/time update_date the instant when the transaction was completed ISO date/time","title":"Response"},{"location":"apiOperations/#get-transaction","text":"This endpoint gives information about a specific transaction","title":"Get Transaction"},{"location":"apiOperations/#request_10","text":"GET /payment/<payment_id>/transactions/<transaction_id>","title":"Request"},{"location":"apiOperations/#response_11","text":"Content-Type : application/json Field Description Format id the ID of the created transaction UUID amount The amount of the transaction Decimal state the transaction state: completed , declined or failed Text id_payment The id of the payment which the transaction is associated UUID emission_date the instant when the transaction was created ISO date/time update_date the instant when the transaction was completed ISO date/time","title":"Response"},{"location":"apiOperations/#errors","text":"The API uses the following error codes: Code Meaning 400 Bad Request -- Your request is invalid. 401 Unauthorized -- Your API key is wrong. 403 Forbidden -- Access to the requested resource or action is forbidden. 404 Not Found -- The requested resource could not be found. 405 Method Not Allowed -- You tried to access an endpoint with an invalid method. 406 Not Acceptable -- You requested a format that isn't JSON. 429 Too Many Requests -- You're sending too many requests. 500 Internal Server Error -- We had a problem with our server. Try again later. 503 Service Unavailable -- We're temporarily offline for maintenance. Please try again later.","title":"Errors"},{"location":"apiOperations/#general-response","text":"All response messages has the fields 'code' and 'response'. The code is the type HTTP Status, and the response always return a 'status' and a body message when necessary.","title":"General Response"},{"location":"gunicorn/","text":"Page last revised on: 2019-10-08 Why use Gunicorn and Nginx? Imagine if you had to do everything yourself with every new web application you build: Host static files Handle https connections Recover from crashes Make sure your application can scale up (via framework or your own code) That sounds like a lot of work. And a lot of work which is the same across most web applications you might come up with. This is good news! Because those problems are so common, you can build tools which take care of them. You don\u2019t even need to put that functionality into your web framework of choice. Three common building blocks when deploying a Python web application to production are: A web server (like nginx) A WSGI (Web Server Gateway Inteface) application server (like Gunicorn) Your actual application (written using a developer-friendly framework like Django) The web server accepts requests, takes care of general domain logic and takes care of handling https connections . Only requests which are meant to arrive at the application are passed on toward the application server and the application itself. The application code does not care about anything except being able to process single requests. Gunicorn takes care of everything which happens in-between the web server and your web application. This way, when coding up your a Django application you don\u2019t need to find your own solutions for: communicating with multiple web servers reacting to lots of web requests at once and distributing the load keepiung multiple processes of the web application running It's a good strategy running our Python Web Application in a WSGI Server. This way, deployment will be more stable, be able to handle more requests at once and be fast about it.","title":"Gunicorn"},{"location":"gunicorn/#why-use-gunicorn-and-nginx","text":"Imagine if you had to do everything yourself with every new web application you build: Host static files Handle https connections Recover from crashes Make sure your application can scale up (via framework or your own code) That sounds like a lot of work. And a lot of work which is the same across most web applications you might come up with. This is good news! Because those problems are so common, you can build tools which take care of them. You don\u2019t even need to put that functionality into your web framework of choice. Three common building blocks when deploying a Python web application to production are: A web server (like nginx) A WSGI (Web Server Gateway Inteface) application server (like Gunicorn) Your actual application (written using a developer-friendly framework like Django) The web server accepts requests, takes care of general domain logic and takes care of handling https connections . Only requests which are meant to arrive at the application are passed on toward the application server and the application itself. The application code does not care about anything except being able to process single requests. Gunicorn takes care of everything which happens in-between the web server and your web application. This way, when coding up your a Django application you don\u2019t need to find your own solutions for: communicating with multiple web servers reacting to lots of web requests at once and distributing the load keepiung multiple processes of the web application running It's a good strategy running our Python Web Application in a WSGI Server. This way, deployment will be more stable, be able to handle more requests at once and be fast about it.","title":"Why use Gunicorn and Nginx?"}]}